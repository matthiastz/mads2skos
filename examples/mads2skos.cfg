# Skosify configuration file for transforming MADS ontologies into SKOS
#
# Can be used e.g. with the LOC media encoding format vocabulary:
# download http://id.loc.gov/vocabulary/mencformat, e.g. http://id.loc.gov/vocabulary/mencformat.rdf
# ./skosify.py mencformat.rdf -c examples/mads2skos.cfg --o mencformat-skos.ttl

# runtime options which correspond to command line parameters
[options]
narrower=True
transitive=False
aggregates=False
debug=False

# define custom RDF namespaces that can then be used in the mappings below (and will also be used in the output file)
# Note that common namespaces are already defined: rdf, rdfs, owl, skos, dc, dct
[namespaces]
dcmitype=http://purl.org/dc/dcmitype/
madsrdf=http://www.loc.gov/mads/rdf/v1#
cs=http://purl.org/vocab/changeset/schema#
ri=http://id.loc.gov/ontologies/RecordInfo#


# define what to do with types in the source vocabulary, i.e. how these map to SKOS constructs
# key: CURIE or localname (string)
# value: CURIE or empty (to delete the instances)
# the <key> instances will be replaced with <value> instances.
# key may start with * which matches any localname prefix
# Note: use period '.' instead of colon ':' as separator in key CURIEs
[types]
#owl.Class=skos:Concept
#rdfs.Class=skos:Concept
madsrdf.Authority=skos:Concept
madsrdf.MADSScheme=skos:ConceptScheme
madsrdf.MADSCollection=skos:Collection

# define what to do with literal properties on Concepts
# key: CURIE or localname (string)
# value: CURIE or empty (to delete the property)
# the <key> properties will be replaced with <value> properties
# key may start with * which matches any prefix
# Note: use period '.' instead of colon ':' as separator in key CURIEs
[literals]
#rdfs.label=skos:prefLabel
#rdfs.comment=skos:definition
madsrdf.authoritativeLabel=skos:prefLabel
madsrdf.changeNote=	skos:changeNote
madsrdf.classification=skos:semanticRelation
madsrdf.code=skos:notation
madsrdf.definitionNote=skos:definition
madsrdf.deprecatedLabel=skos:hiddenLabel
madsrdf.editorialNote=skos:editorialNote
madsrdf.exampleNote=skos:example
madsrdf.historyNote=skos:historyNote
madsrdf.note=skos:note
madsrdf.scopeNote=skos:scopeNote

# define what to do with relation properties on Concepts
# key: CURIE or localname (string)
# value: CURIE or empty (to delete the property)
# the <key> properties will be replaced with <value> properties
# key may start with * which matches any prefix
# Note: use period '.' instead of colon ':' as separator in key CURIEs
[relations]
#rdfs.subClassOf=skos:broader
#owl.equivalentClass=skos:exactMatch
madsrdf.hasBroaderAuthority=skos:broader
madsrdf.hasBroaderExternalAuthority=skos:broadMatch
madsrdf.hasCloseExternalAuthority=skos:closeMatch
madsrdf.hasExactExternalAuthority=skos:exactMatch
madsrdf.hasMADSCollectionMember=skos:member
madsrdf.hasNarrowerAuthority=skos:narrower
madsrdf.hasNarrowerExternalAuthority=skos:narrowMatch
madsrdf.hasReciprocalAuthority=skos:related
madsrdf.hasReciprocalExternalAuthority=skos:relatedMatch
madsrdf.hasRelatedAuthority=skos:semanticRelation
madsrdf.hasTopMemberOfMADSScheme=skos:hasTopConcept
madsrdf.isTopMemberOfMADSScheme=skos:topConceptOf